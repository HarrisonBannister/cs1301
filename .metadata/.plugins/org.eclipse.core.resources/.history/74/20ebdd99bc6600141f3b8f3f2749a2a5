import java.util.Scanner;

/**
* Adventure.java
* Author: Harrison Bannister
* Submission Date: [Submission date here]
*
* Purpose: This program leads the user through an interactive fiction 
* game, "The Adventure of the Cave of Redundancy Adventure".
*
* Statement of Academic Honesty:
*
* The following code represents my own work. I have neither
* received nor given inappropriate assistance. I have not copied
* or modified code from any source other than the course webpage
* or the course textbook. I recognize that any unauthorized
* assistance or plagiarism will be handled in accordance with
* the University of Georgia's Academic Honesty Policy and the
* policies of this course. I recognize that my work is based
* on an assignment created by the Department of Computer
* Science at the University of Georgia. Any publishing
* or posting of source code for this project is strictly
* prohibited unless you have written consent from the Department
* of Computer Science at the University of Georgia.
*/

public class Adventure {

	public static void main(String[] args) {
		
		// TODO Auto-generated method stub
		// Game startup new map / setting up player
		
		int playerYCoord = 0;
		int playerXCoord = 0;
		Player player = new Player();
		Map map = new Map();
		player.setyCoord(playerYCoord);
		player.setxCoord(playerXCoord);

		Scanner sc = new Scanner(System.in);
		System.out.print("Welcome to UGA Adventures: Episode 1\n"+
							"The Adventure of the Cave of Redundancy Adventure\n"+
							"By: Harrison Bannister");
		
		// main game loop

	}
	
	public static Map startNewGame(Player player) {
		Map map = new Map();
		return map;
	}
	
	public static void adventure() {
		
	}
	
	
	/*
	 * Player Commands Methods -  these handle player's commands
	 */
		/*
		 * Chest Commands
		 */
	public static Player unlockChest(Player player, Map map) {
		
		
		// return player object just in case conditions fail
		return player;
	}
	
	public static Player openChest(Player player, Map map) {
		
		
		// return player object just in case conditions fail
		return player;
	}
	
	public static Player getKey(Player player, Map map) {
		
		
		// return player object just in case conditions fail
		return player;
	}	
		/*
		 * Movement and Looking
		 */
	public static void look(Player player, Map map) {
		
	}
	
	public static Player movePlayer(int x, int y, String playerInput, Player player, Map map) {
		
		// player movement loop
		if (playerInput.equalsIgnoreCase("north")) {
			
		} else if (playerInput.equalsIgnoreCase("south")) {
			
		} else if (playerInput.equalsIgnoreCase("east")) {
		
		} else {
			
		}
		
		// return player object just in case conditions fail
		return player;
	}		
		/*
		 * Lamp Commands
		 */
	public static Lamp getLamp(Player player, Map map) {
		
		// return player object just in case conditions fail
		return lamp;
	}
	
	public static Lamp lightLamp(Player player, Lamp lamp) {
		return lamp;
	}
	
	/*
	 * Player input handling methods
	 */
	public static boolean playerInputIsValid(String playerInput) {
		if (!(playerInput.equalsIgnoreCase("get lamp")) && !(playerInput.equalsIgnoreCase("light lamp"))&&
				!(playerInput.equalsIgnoreCase("north"))&& !(playerInput.equalsIgnoreCase("south"))&&
				!(playerInput.equalsIgnoreCase("east")) && !(playerInput.equalsIgnoreCase("west"))&&
				!(playerInput.equalsIgnoreCase("get lamp"))) {
			return true;
		} else {
			return false;
		}
	}
	
	public static String filterPlayerInput(String playerInput) {
		Scanner sc =  new Scanner(System.in);
		// makes sure input is valid
		while (Adventure.playerInputIsValid(playerInput)) {
			System.out.println("I'm sorry I don't know how to do that.");
			System.out.println("Please enter a valid command:");
			playerInput = sc.next();
		}
		sc.close();
		return playerInput;
	}
	
	// null check
	
	public boolean isNull()
}